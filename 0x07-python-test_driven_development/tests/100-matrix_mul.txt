# 100-matrix_mul.txt

===========================
How to Use 100-matrix_mul.py
===========================

This module defines the `matrix_mul` function that multiplies 2 matrices.

Usage
=====

`matrix_mul(m_a, m_b)` returns the multiplication of `m_a` and `m_b` matrices.

Example:

    >>> matrix_mul = __import__('100-matrix_mul').matrix_mul

::

    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
    [[7, 10], [15, 22]]

::
    >>> matrix_mul("matrix_a", [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ...
    TypeError: m_a must be a list

::

    >>> matrix_mul([[1, 2], [3, 4]], 'str')
    Traceback (most recent call last):
    ...
    TypeError: m_b must be a list

::
    >>> matrix_mul(['str', 2, 3], [[1, 2], [1, 2]])
    Traceback (most recent call last):
    ...
    TypeError: m_a must be a list of lists

::
    >>> matrix_mul([[1, 2], [3, 4]], [1, 2])
    Traceback (most recent call last):
    ...
    TypeError: m_b must be a list of lists

::

    >>> matrix_mul([], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ...
    ValueError: m_a can't be empty

::

    >>> matrix_mul([[1, 2], [3, 4]], [[]])
    Traceback (most recent call last):
    ...
    ValueError: m_b can't be empty

::
    >>> matrix_mul([[1, 2], [3, "four"]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ...
    TypeError: m_a should contain only integers or floats

::

    >>> matrix_mul([[1, 2], [3, 4]], [["a", "b"], ["c", "d"]])
    Traceback (most recent call last):
    ...
    TypeError: m_b should contain only integers or floats

::
    >>> matrix_mul([[1, 2], [3]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ...
    TypeError: each row of m_a must be of the same size

::
    >>> matrix_mul([[1, 2], [3, 2]], [[1, 2], [3]])
    Traceback (most recent call last):
    ...
    TypeError: each row of m_b must be of the same size

::

    >>> matrix_mul([[1, 2, 3]], [[1, 2, 3], [4, 5, 6]])
    Traceback (most recent call last):
    ...
    ValueError: m_a and m_b can't be multiplied

::

    >>> matrix_mul([[0]], [[0]])
    [[0]]

::

    >>> matrix_mul([[1.5, 2.5], [3.5, 4.5]], [[1, 2], [3, 4]])
    [[9.0, 13.0], [17.0, 25.0]]

::

    >>> matrix_mul([[1, 2], [3, 4]], [[1], [2]])
    [[5], [11]]

::

    >>> matrix_mul([], [])
    Traceback (most recent call last):
    ...
    ValueError: m_a can't be empty

::

    >>> matrix_mul("matrix_a", "matrix_b")
    Traceback (most recent call last):
    ...
    TypeError: m_a must be a list

::

    >>> matrix_mul([[1, 2], [3, "four"]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ...
    TypeError: m_a should contain only integers or floats

::

    >>> matrix_mul([[1, 2], [3]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ...
    TypeError: each row of m_a must be of the same size

::

    >>> matrix_mul([[]], [[]])
    Traceback (most recent call last):
    ...
    ValueError: m_a can't be empty

::

    >>> matrix_mul([[1, 2], [3, 4]], [["a", "b"], ["c", "d"]])
    Traceback (most recent call last):
    ...
    TypeError: m_b should contain only integers or floats
