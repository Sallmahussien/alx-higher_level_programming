=================================
How to Use 101-lazy_matrix_mul.py
=================================

This module defines a matrix multiplication function
``lazy_matrix_mul(m_a, m_b)``.

Usage
=====

``lazy_matrix_mul(...)`` returns a new matrix representing the multiplication
of ``m_a`` by ``m_b``.

::

    >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul
    >>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
    array([[ 7, 10],
           [15, 22]])

::

    >>> lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6]])
    array([[13, 16]])

::

    >>> lazy_matrix_mul([[1, 2, 3], [1, 2, 3]])
    Traceback (most recent call last):
    TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

::

    >>> lazy_matrix_mul()
    Traceback (most recent call last):
    TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

::

    >>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [2, 3], [4, 5]])
    Traceback (most recent call last):
    ValueError: shapes (2,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)

::

    >>> lazy_matrix_mul([[]], [[5, 6], [7, 8]])
    Traceback (most recent call last):
    ValueError: shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)

::

    >>> lazy_matrix_mul([[5, 6], [7, 8]], [[]])
    Traceback (most recent call last):
    ValueError: shapes (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)

::

    >>> lazy_matrix_mul("not a list", [[1, 2]])
    Traceback (most recent call last):
    ValueError: Scalar operands are not allowed, use '*' instead

::

    >>> lazy_matrix_mul([[1, 2]], "also not a list")
    Traceback (most recent call last):
    ValueError: Scalar operands are not allowed, use '*' instead

::

    >>> lazy_matrix_mul("not a list", "also not a list")
    Traceback (most recent call last):
    ValueError: Scalar operands are not allowed, use '*' instead

::

    >>> lazy_matrix_mul(None, None)
    Traceback (most recent call last):
    TypeError: Object arrays are not currently supported

::

    >>> lazy_matrix_mul([1, 2], [[3, 4]])
    Traceback (most recent call last):
    ValueError: shapes (2,) and (1,2) not aligned: 2 (dim 0) != 1 (dim 0)

::

    >>> lazy_matrix_mul([[1, 2]], [3, 4])
    array([11])

::

    >>> lazy_matrix_mul([1, 2], [3, 4])
    11

::

    >>> lazy_matrix_mul([[1, "non-number"]], [[3, 4]])
    Traceback (most recent call last):
    ValueError: shapes (1,2) and (1,2) not aligned: 2 (dim 1) != 1 (dim 0)

::

    >>> lazy_matrix_mul([[5, 6], [7, 8]], [[5, "6"], [7, 8]])
    Traceback (most recent call last):
    TypeError: invalid data type for einsum


::

    >>> lazy_matrix_mul([[1, 2], [3, 4, 5]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ValueError: setting an array element with a sequence.

::

    >>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4, 5]])
    Traceback (most recent call last):
    ValueError: setting an array element with a sequence.
